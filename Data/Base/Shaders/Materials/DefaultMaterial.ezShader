[PLATFORMS]
ALL

[PERMUTATIONS]

BLEND_MODE
RENDER_PASS
SHADING_MODE
TWO_SIDED
FLIP_WINDING
FORWARD_PASS_WRITE_DEPTH
MSAA
CAMERA_MODE
SHADING_QUALITY
VERTEX_SKINNING

[MATERIALPARAMETER]

Permutation BLEND_MODE;
Permutation SHADING_MODE;
Permutation TWO_SIDED;

float MaskThreshold @Default(0.25);

bool UseBaseTexture;
Texture2D BaseTexture;
Color BaseColor @Default(1.0, 1.0, 1.0);

bool UseNormalAndRoughnessTexture;
Texture2D NormalTexture;
Texture2D RoughnessTexture;
float RoughnessValue @Default(0.7) @Clamp(0.0, 1.0);

bool UseMetallicTexture;
Texture2D MetallicTexture;
float MetallicValue @Default(0.0) @Clamp(0.0, 1.0);

bool UseEmissiveTexture;
Texture2D EmissiveTexture;
Color EmissiveColor @Default(0.0, 0.0, 0.0);

bool UseOcclusionTexture;
Texture2D OcclusionTexture;

[RENDERSTATE]

#include <Shaders/Materials/MaterialState.h>

[VERTEXSHADER]

#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0

#if VERTEX_SKINNING
    #define USE_SKINNING
#endif

#include <Shaders/Materials/DefaultMaterialCB.h>
#include <Shaders/Materials/MaterialVertexShader.h>

VS_OUT main(VS_IN Input)
{
  return FillVertexData(Input);
}


[GEOMETRYSHADER]

#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0

#include <Shaders/Materials/MaterialStereoGeometryShader.h>


[PIXELSHADER]

#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0
#define USE_SIMPLE_MATERIAL_MODEL
#define USE_MATERIAL_EMISSIVE
#define USE_MATERIAL_OCCLUSION
#define USE_TWO_SIDED_LIGHTING
#define USE_DECALS

#include <Shaders/Materials/DefaultMaterialCB.h>
#include <Shaders/Materials/MaterialPixelShader.h>

Texture2D BaseTexture;
SamplerState BaseTexture_AutoSampler;

Texture2D NormalTexture;
SamplerState NormalTexture_AutoSampler;

Texture2D MetallicTexture;
SamplerState MetallicTexture_AutoSampler;

Texture2D RoughnessTexture;
SamplerState RoughnessTexture_AutoSampler;

Texture2D EmissiveTexture;
SamplerState EmissiveTexture_AutoSampler;

Texture2D OcclusionTexture;
SamplerState OcclusionTexture_AutoSampler;

float3 GetNormal(PS_IN Input)
{
  [branch]
  if (UseNormalAndRoughnessTexture)
  {
    float3 normalTS = DecodeNormalTexture(NormalTexture.Sample(NormalTexture_AutoSampler, Input.TexCoords.xy));
    return TangentToWorldSpace(normalTS, Input);
  }
  else
  {
    return Input.Normal;
  }
}

float3 GetBaseColor(PS_IN Input)
{
  [branch]
  if (UseBaseTexture)
  {
    return BaseTexture.Sample(BaseTexture_AutoSampler, Input.TexCoords.xy).rgb * BaseColor.rgb;
  }
  else
  {
    return BaseColor.rgb;
  }
}

float GetMetallic(PS_IN Input)
{
  [branch]
  if (UseMetallicTexture)
  {
    return MetallicTexture.Sample(MetallicTexture_AutoSampler, Input.TexCoords.xy).r;
  }
  else
  {
    return MetallicValue;
  }
}

float GetReflectance(PS_IN Input)
{
  return 0.5f;
}

float GetRoughness(PS_IN Input)
{
  [branch]
  if (UseNormalAndRoughnessTexture)
  {
    return RoughnessTexture.Sample(RoughnessTexture_AutoSampler, Input.TexCoords.xy).r;
  }
  else
  {
    return RoughnessValue;
  }
}

float GetOpacity(PS_IN Input)
{
  float opacity;

  [branch]
  if (UseBaseTexture)
  {
    opacity = BaseTexture.Sample(BaseTexture_AutoSampler, Input.TexCoords.xy).a * BaseColor.a;
  }
  else
  {
    opacity = BaseColor.a;
  }

  #if BLEND_MODE == BLEND_MODE_MASKED
    return opacity - MaskThreshold;
  #else
    return opacity;
  #endif
}

float3 GetEmissiveColor(PS_IN Input)
{
  [branch]
  if (UseEmissiveTexture)
  {
    return EmissiveTexture.Sample(EmissiveTexture_AutoSampler, Input.TexCoords.xy).rgb * EmissiveColor.rgb;
  }
  else
  {
    return EmissiveColor.rgb;
  }
}

float GetOcclusion(PS_IN Input)
{
  [branch]
  if (UseOcclusionTexture)
  {
    return OcclusionTexture.Sample(OcclusionTexture_AutoSampler, Input.TexCoords.xy).r;
  }
  else
  {
    return 1.0f;
  }
}
