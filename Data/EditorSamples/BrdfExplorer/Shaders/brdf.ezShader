[PLATFORMS] 
ALL

[PERMUTATIONS]
RENDER_PASS
STOCHASTIC_PASS
STOCHASTIC_INITIAL
IMPORTANCE_SAMPLE
DIFFUSE_BRDF
SPECULAR_BRDF
DISTRIBUTION
GEOMETRY_TERM
CAMERA_MODE = CAMERA_MODE_PERSPECTIVE

[MATERIALPARAMETER]

TextureCube CubeMap;
bool InverseTonemap;
float ExposureBias;
Permutation DIFFUSE_BRDF;
Permutation SPECULAR_BRDF;
Permutation DISTRIBUTION;
Permutation GEOMETRY_TERM;
Permutation IMPORTANCE_SAMPLE;
float Roughness;
Color DiffuseColor;
Color SpecularColor;

[RENDERSTATE]
DepthTest = true
DepthWrite = true
#if STOCHASTIC_PASS == TRUE
DepthTestFunc = CompareFunc_Equal
#else
DepthTestFunc = CompareFunc_LessEqual
#endif


CullMode = CullMode_None

#if STOCHASTIC_INITIAL == FALSE
BlendingEnabled0 = true
BlendOp0 = BlendOp_Add
DestBlend0 = Blend_One
SourceBlend0 = Blend_One

BlendingEnabled1 = true
BlendOp1 = BlendOp_Add
DestBlend1 = Blend_One
SourceBlend1 = Blend_One
#endif

[VERTEXSHADER]

#include "MaterialConstants.h"
#include <Shaders/Common/GlobalConstants.h>
#include <Shaders/Common/ObjectConstants.h>

#ifdef PLATFORM_DX11

VS_OUT main(VS_IN Input)
{

  VS_OUT RetVal;
  
  ezPerInstanceData data = GetInstanceData(Input);
  float4x4 objectToWorld = TransformToMatrix(data.ObjectToWorld);
  float3x3 objectToWorldNormal = (float3x3)TransformToMatrix(data.ObjectToWorldNormal);

  RetVal.WorldPosition = mul(objectToWorld, float4(Input.Position, 1.0)).xyz;

  RetVal.Position = mul(GetWorldToScreenMatrix(), float4(RetVal.WorldPosition, 1.0));
  
  RetVal.Normal = mul(objectToWorldNormal, Input.Normal);

  return RetVal;
}

#endif


[PIXELSHADER]

#include "MaterialConstants.h"
#include <Shaders/Common/Common.h>
#include <Shaders/Common/GlobalConstants.h>
#include <Shaders/Common/ObjectConstants.h>

#ifdef PLATFORM_DX11

TextureCube CubeMap;
SamplerState CubeMap_AutoSampler;

struct PS_OUT
{
	float4 color : SV_Target0;
	float numSamples : SV_Target1;
};

#if STOCHASTIC_PASS == TRUE
StructuredBuffer<float> randomNumbers;
#endif


float2 ConcentricSampleDisk(float2 uv)
{
  uv = uv * 2.0f - 1.0f;
  float r, theta;
  if(uv.x == 0.0f && uv.y == 0.0f)
    return float2(0.0f, 0.0f);

  if(uv.x >= -uv.y) 
  {
    if(uv.x > uv.y)
    {
      r = uv.x;
      theta = (uv.y > 0.0f) ? theta = uv.y / r : 8.0f + uv.y / r;
    }
    else
    {
      r = uv.y;
      theta = 2.0f - uv.x / r;
    }
  }
  else
  {
    if(uv.x <= uv.y)
    {
      r = -uv.x;
      theta = 4.0f - uv.y / r;
    }
    else
    {
      r = -uv.y;
      theta = 6.0f + uv.x / r;
    }
  }
  theta *= PI / 4.0f;
  return float2(r * cos(theta), r * sin(theta));
}

// has a PDF = 1 / (2 * PI)
float3 UniformSampleHemisphere(float2 uv)
{
	float z = uv.x;
	float r = sqrt(max(0.0f, 1.0f - z*z));
	float phi = 2.0f * PI * uv.y;
	float x = r * cos(phi);
	float y = r * sin(phi);
	return float3(x, y, z);
}

// has a PDF = cos(theta) / PI
float3 CosineSampleHemisphere(float2 uv)
{
  float3 result = float3(ConcentricSampleDisk(uv), 0.0f);
  result.z = sqrt(max(0.0f, 1.0f - result.x * result.x - result.y * result.y));
  return result;
}

float3 Li(float3 Wi)
{
	float3 lookupDir = CubeMapDirection(Wi);
	float3 color = CubeMap.SampleLevel(CubeMap_AutoSampler, lookupDir, 0.0f).xyz;
	
	float weight = exp2(ExposureBias);

	if (InverseTonemap)
	{
		float luminance = GetLuminance(color);
		weight *= rcp(max(1.0f - luminance, 0.001f));
	}
	
	color *= weight;
	return color;
}

float getRandomNumber(inout uint2 randomState)
{
#if STOCHASTIC_PASS == TRUE
	float result = randomNumbers[randomState.x];
	randomState.x++;
	if(randomState.x > randomState.y)
	{
		randomState.x = 0;
	}
	return result;
#else
	return 0.5f; // determined by fair dice roll
#endif
}

float2 getRandomFloat2(inout uint2 randomState)
{
	return float2(getRandomNumber(randomState), getRandomNumber(randomState));
}

struct PerPixelData
{
	float3 Normal;
	float3 Tangent;
	float3 BiTangent;
	float3 ViewVector;
};

float3 TangentToWorldSpace(float3 vectorTS, PerPixelData ppd)
{
  return vectorTS.x * ppd.Tangent + vectorTS.y * ppd.BiTangent + vectorTS.z * ppd.Normal;
}

float3 WorldSpaceToTangentSpace(float3 vectorWS, PerPixelData ppd)
{
  float3x3 WStoTS = float3x3(ppd.Tangent, ppd.BiTangent, ppd.Normal);
  return mul(WStoTS, vectorWS);
}

float3 directionWithOffset(float2 randomDir, float offset)
{
    return normalize(float3(randomDir.x * 2 * offset - offset, randomDir.y * 2 * offset - offset, 1.0f));
}

float3 perp_quick(float3 u)
{
    float3 v;
    if (abs(u.y) < 0.99)          // abs(dot(u, UP)), somewhat arbitrary epsilon
        v = float3(-u.z, 0, u.x); // cross(u, UP)
    else
        v = float3(0, u.z, -u.y); // cross(u, RIGHT)
    return v;
}

float3 perp_hm(float3 u)
{
    float3 a = abs(u);
    float3 v;
    if (a.x <= a.y && a.x <= a.z)
        v = float3(0, -u.z, u.y);
    else if (a.y <= a.x && a.y <= a.z)
        v = float3(-u.z, 0, u.x);
    else
        v = float3(-u.y, u.x, 0);
    return v;
}

float3 SphericalDirection(float sintheta, float costheta, float phi) 
{
    return float3(sintheta * cos(phi), sintheta * sin(phi), costheta);
}

float CosTheta(float3 w) { return w.z; }
float Cos2Theta(float3 w) { return CosTheta(w) * CosTheta(w); }
float Sin2Theta(float3 w) { return max(0, 1 - Cos2Theta(w)); }
float SinTheta(float3 w) { return sqrt(Sin2Theta(w)); }
float TanTheta(float3 w) { return SinTheta(w) / CosTheta(w); }
float Tan2Theta(float3 w) { return Sin2Theta(w) / Cos2Theta(w); }
float CosPhi(float3 w) 
{
    float sinTheta = SinTheta(w);
    return (sinTheta == 0) ? 1 : clamp(w.x / sinTheta, -1, 1);
}

float SinPhi(float3 w) 
{
    float sinTheta = SinTheta(w);
    return (sinTheta == 0) ? 0 : clamp(w.y / sinTheta, -1, 1);
}

float Cos2Phi(float3 w) { return CosPhi(w) * CosPhi(w); }
float Sin2Phi(float3 w) { return SinPhi(w) * SinPhi(w); }

////////////////////////////////////////////////////////
/// Lambertian BRDF ////////////////////////////////////
////////////////////////////////////////////////////////

#if DIFFUSE_BRDF == DIFFUSE_BRDF_LAMBERTIAN
	#define SampleDiffuseBrdf SampleLambertianBrdf
	#define ImportanceSampleDiffuseBrdf ImportanceSampleLambertianBrdf
	#define DiffuseBrdfPdf LambertianBrdfPdf
#endif

float3 SampleLambertianBrdf(PerPixelData ppd, float3 L)
{
	return DiffuseColor.rgb * (max(CosTheta(L),0.0f) / PI); // equal to dot(N,L) in tangent space
}

float3 ImportanceSampleLambertianBrdf(PerPixelData ppd, float2 rand, out float3 L, out float pdf)
{
	L = CosineSampleHemisphere(rand);
	pdf = max(CosTheta(L),0.0f) / PI;
	return DiffuseColor.rgb * (max(CosTheta(L),0.0f) / PI);
}

float LambertianBrdfPdf(PerPixelData ppd, float3 L)
{
	return max(CosTheta(L),0.0f) / PI;
}

////////////////////////////////////////////////////////
/// Ashikhmin Shirley Diffuse BRDF /////////////////////
////////////////////////////////////////////////////////

#if DIFFUSE_BRDF == DIFFUSE_BRDF_ASHIKHMIN_SHIRLEY
	#define SampleDiffuseBrdf SampleAshikhminShirleyDiffuseBrdf
	#define ImportanceSampleDiffuseBrdf ImportanceSampleAshikhminShirleyDiffuseBrdf
	#define DiffuseBrdfPdf AshikhminShirleyDiffuseBrdfPdf
#endif

float3 SampleAshikhminShirleyDiffuseBrdf(PerPixelData ppd, float3 L)
{
	float n1 = (1.0f - pow(1.0f - max(CosTheta(L),0.0f) * 0.5f, 5.0f));
	float n2 = (1.0f - pow(1.0f - max(CosTheta(ppd.ViewVector),0.0f) * 0.5f, 5.0f));
	return (28.0f / (23.0f * PI) * n1 * n2) * DiffuseColor.rgb * (1.0f - SpecularColor.rgb);
}

float3 ImportanceSampleAshikhminShirleyDiffuseBrdf(PerPixelData ppd, float2 rand, out float3 L, out float pdf)
{
	L = CosineSampleHemisphere(rand);
	pdf = max(CosTheta(L),0.0f) / PI;
	
	float n1 = (1.0f - pow(1.0f - max(CosTheta(L),0.0f) * 0.5f, 5.0f));
	float n2 = (1.0f - pow(1.0f - max(CosTheta(ppd.ViewVector),0.0f) * 0.5f, 5.0f));
	return (28.0f / (23.0f * PI) * n1 * n2) * DiffuseColor.rgb * (1.0f - SpecularColor.rgb);
}

float AshikhminShirleyDiffuseBrdfPdf(PerPixelData ppd, float3 L)
{
	return max(CosTheta(L),0.0f) / PI;
}

////////////////////////////////////////////////////////
/// GGX Microfacet distribution ////////////////////////
////////////////////////////////////////////////////////

#if DISTRIBUTION == DISTRIBUTION_GGX
	#define Distribution SpecularGGX
	#define ImportanceSampleDistribution ImportanceSampleGGX
	#define DistributionPDF (abs(NdotH))
	#define DistributionLambda LambdaGGX
#endif

float SpecularGGX( float3 H )
{
	// mad friendly reformulation of:
	//
	//              m^2
	// --------------------------------
	// PI * ((N.H)^2 * (m^2 - 1) + 1)^2

	float NdotH = CosTheta(H);
	float r = max(0.01, Roughness);
	float a = r * r;
	float a2 = a * a;
	float f = ( NdotH * a2 - NdotH ) * NdotH + 1.0f;
	return a2 / (PI * f * f );
}

float3 ImportanceSampleGGX( float2 Xi, PerPixelData ppd )
{
	float r = max(0.01, Roughness);
	float a = r * r;
	float Phi = 2 * PI * Xi.x;
	float CosTheta = sqrt( (1 - Xi.y) / ( 1 + (a*a - 1) * Xi.y ) );
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );
	float3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;
	
	return H;
}


float3 ImportanceSampleGGX2( float2 Xi, PerPixelData ppd )
{
	float a = Roughness * Roughness;
	float phi = 2 * PI * Xi.y;
	float tanTheta2 = a * a * Xi.x / (1.0f - Xi.x);
	float cosTheta = 1 / sqrt(1 + tanTheta2);
	float sinTheta = sqrt(max(1 - cosTheta * cosTheta, 0));
	float3 H = SphericalDirection(sinTheta, cosTheta, phi);
	
	float3 V = WorldSpaceToTangentSpace(ppd.ViewVector, ppd);

	// ensure H and V are on the same hemisphere
	if(V.z * H.z < 0)
	{
		H = -H;
	}
	
	return H;
}

float LambdaGGX(float3 w)
{
	float alpha = Roughness * Roughness;
	float a = 1.0f / (alpha * TanTheta(w));
	return (-1 + sqrt(1 + 1 / (a * a))) * 0.5;
}

////////////////////////////////////////////////////////
/// Beckmann Microfacet distribution ///////////////////
////////////////////////////////////////////////////////

#if DISTRIBUTION == DISTRIBUTION_BECKMANN
	#define Distribution SpecularBeckmann
	#define ImportanceSampleDistribution ImportanceSampleBeckmann
	#define DistributionPDF (abs(NdotH))
#endif

float BeckmannRoughnessToAlpha(float roughness)
{
        roughness = max(roughness, 1e-3);
        float x = log(roughness);
        return 1.62142f + 0.819955f * x + 0.1734f * x * x +
               0.0171201f * x * x * x + 0.000640711f * x * x * x * x;
}

float SpecularBeckmann( float3 wh )
{
	float alpha = BeckmannRoughnessToAlpha(Roughness);
	float alpha2 = alpha * alpha;
	float NdotH = CosTheta(wh);
    float cos2Theta = NdotH * NdotH;
    float cos4Theta = cos2Theta * cos2Theta;
    return exp(-Tan2Theta(wh) * (Cos2Phi(wh) / alpha2 +
                                  Sin2Phi(wh) / alpha2)) / (PI * alpha2 * cos4Theta);
}


////////////////////////////////////////////////////////
/// Cook Torrance //////////////////////////////////////
////////////////////////////////////////////////////////

#if SPECULAR_BRDF == SPECULAR_BRDF_COOK_TORRANCE
	#define SampleSpecularBrdf SampleCookTorranceBrdf
	#define ImportanceSampleSpecularBrdf ImportanceSampleCookTorranceBrdf
	#define SpecularBrdfPdf CookTorranceBrdfPdf
#endif

float G_Smith_Lambda(float3 L, float3 V)
{
	float A = 1 / (1 + DistributionLambda(L));
	float B = 1 / (1 + DistributionLambda(V));
	return A * B;
}

float G_Smith_Lambda_Correlated(float3 L, float3 V)
{
	return 1 / (1 + DistributionLambda(L) + DistributionLambda(V));
}

float Vis_Smith( float roughness, float NdotV, float NdotL )
{
	float a = roughness * roughness;
	float a2 = a*a;

	float Vis_SmithV = NdotV + sqrt( NdotV * (NdotV - NdotV * a2) + a2 );
	float Vis_SmithL = NdotL + sqrt( NdotL * (NdotL - NdotL * a2) + a2 );
	return rcp( Vis_SmithV * Vis_SmithL );
}

float VisibilitySmithJointApprox( float roughness, float NdotV, float NdotL )
{
	float a = roughness * roughness;
	float lambdaV = NdotL * ( NdotV * ( 1.0f - a ) + a );
	float lambdaL = NdotV * ( NdotL * ( 1.0f - a ) + a );
	return 0.5f / ( lambdaV + lambdaL );
}

float3 FresnelSchlick( float3 f0, float u )
{
	return f0 + (1.0f - f0) * pow(1.0f - u, 5.0f);
}

// note that N.L * 1/PI is already included in the light attenuation which is applied later
float3 SampleCookTorranceBrdf( PerPixelData ppd, float3 L )
{
	float3 H = normalize(ppd.ViewVector + L);
	float NdotL = saturate( CosTheta(L) );
	float NdotV = max( CosTheta(ppd.ViewVector), 1e-5f );
	float NdotH = saturate( CosTheta(H) );
	float VdotH = saturate( dot(ppd.ViewVector, H) );

	// Cook-Torrance microfacet BRDF
	//
	//    D * G * F                                  G
	//  ------------- = D * Vis * F with Vis = -------------
	//  4 * N.L * N.V                          4 * N.L * N.V

	float D = Distribution( NdotH );
	
	#if GEOMETRY_TERM == GEOMETRY_TERM_UE4_APPROX
		float Vis = VisibilitySmithJointApprox( Roughness, NdotV, NdotL );
	#elif GEOMETRY_TERM == GEOMETRY_TERM_SMITH
		float Vis = G_Smith_Lambda(L, ppd.ViewVector) / (4 * NdotL * NdotV);
	#elif GEOMETRY_TERM == GEOMETRY_TERM_SMITH_CORRELATED
		float Vis = G_Smith_Lambda_Correlated(L, ppd.ViewVector) / (4 * NdotL * NdotV);
	#else
		#error unhandeled GEOMETRY_TERM value
	#endif
    
	float3 F = FresnelSchlick( SpecularColor.rgb, VdotH );

	return max(F * (D * Vis * NdotL), 0);
}

float3 ImportanceSampleCookTorranceBrdf(PerPixelData ppd, float2 rand, out float3 L, out float pdf)
{
	float3 H = ImportanceSampleDistribution(rand, ppd);
	L = normalize(2 * dot( ppd.ViewVector, H ) * H - ppd.ViewVector);
	
	float NdotL = saturate( CosTheta(L) );
	float NdotV = max( CosTheta(ppd.ViewVector), 1e-5f );
	float NdotH = saturate( CosTheta(H) );
	float VdotH = saturate( dot(ppd.ViewVector, H) );
	
	float D = Distribution( NdotH );
	
	#if GEOMETRY_TERM == GEOMETRY_TERM_UE4_APPROX
		float Vis = VisibilitySmithJointApprox( Roughness, NdotV, NdotL );
	#elif GEOMETRY_TERM == GEOMETRY_TERM_SMITH
		float Vis = G_Smith_Lambda(L, ppd.ViewVector) / (4 * NdotL * NdotV);
	#elif GEOMETRY_TERM == GEOMETRY_TERM_SMITH_CORRELATED
		float Vis = G_Smith_Lambda_Correlated(L, ppd.ViewVector) / (4 * NdotL * NdotV);
	#else
		#error unhandeled GEOMETRY_TERM value
	#endif
	
	float3 F = FresnelSchlick( SpecularColor.rgb, VdotH );
	pdf = (D * DistributionPDF) / (4 * VdotH);
	
	//if(L.z < 0)
		//return 0.0f;
	
	return max(F * (D * Vis * NdotL), 0);
}

float CookTorranceBrdfPdf(PerPixelData ppd, float3 L)
{
	float3 H = normalize(ppd.ViewVector + L);
	float NdotH = saturate( CosTheta(H) );
	float VdotH = saturate( dot(ppd.ViewVector, H) );
	float D = Distribution( NdotH );
	return (D * DistributionPDF) / (4 * VdotH); 
}

#if RENDER_PASS == RENDER_PASS_DEPTH_ONLY
void main(PS_IN Input)
#elif STOCHASTIC_PASS == TRUE
PS_OUT main(PS_IN Input, float4 screenSpace : SV_Position)
#else
float4 main(PS_IN Input) : SV_Target
#endif
{
	#if RENDER_PASS == RENDER_PASS_DEPTH_ONLY
	#elif STOCHASTIC_PASS == TRUE
		PS_OUT output;
		
		// Initialize random numbers
		uint structStride;
		uint2 randomState;
		randomNumbers.GetDimensions(randomState.y, structStride);
		randomState.x = uint(randomNumbers[uint(screenSpace.y) % randomState.y] * 2791 + randomNumbers[uint(screenSpace.x) % randomState.y] * 4507 ) % randomState.y;
		
		// Compute tangent space
		PerPixelData ppd;
		ppd.Normal = normalize(Input.Normal);
		ppd.Tangent = normalize(perp_hm(ppd.Normal));
		ppd.BiTangent = normalize(cross(ppd.Normal, ppd.Tangent));
		ppd.ViewVector = WorldSpaceToTangentSpace(normalize(GetCameraPosition() - Input.WorldPosition), ppd);
		
		// Monte carlo solving
		const int numSamples = 100;
		float3 accu = 0.0f;
        
        
		
		[loop]
		for(int i=0; i < numSamples; i++)
		{
			#if IMPORTANCE_SAMPLE
				float3 Wi;
				float3 fr = 0.0f;
				float pdf = 0.0f;
				#if DIFFUSE_BRDF != DIFFUSE_BRDF_NONE && SPECULAR_BRDF != SPECULAR_BRDF_NONE
				float2 rand = getRandomFloat2(randomState);
				if(rand.x < 0.5)
				{
					rand.x = rand.x * 2.0f;
					fr = ImportanceSampleDiffuseBrdf(ppd, rand, Wi, pdf);
					fr += SampleSpecularBrdf(ppd, Wi);
					pdf += SpecularBrdfPdf(ppd, Wi);
					fr /= (0.5f * pdf);
				}
				else
				{
					rand.x = (rand.x - 0.5) * 2.0f;
					fr = ImportanceSampleSpecularBrdf(ppd, rand, Wi, pdf);
					fr += SampleDiffuseBrdf(ppd, Wi);
					pdf += DiffuseBrdfPdf(ppd, Wi);
					fr /= (0.5 * pdf);
				}
				#elif DIFFUSE_BRDF != DIFFUSE_BRDF_NONE
				fr = ImportanceSampleDiffuseBrdf(ppd, getRandomFloat2(randomState), Wi, pdf);
				fr /= pdf;
				#elif SPECULAR_BRDF != SPECULAR_BRDF_NONE
				fr = ImportanceSampleSpecularBrdf(ppd, getRandomFloat2(randomState), Wi, pdf);
				fr /= pdf;
				#endif
			#else
				float3 Wi = normalize(UniformSampleHemisphere(getRandomFloat2(randomState)));
				float3 fr = 0.0f;
				#if DIFFUSE_BRDF != DIFFUSE_BRDF_NONE
					fr += SampleDiffuseBrdf(ppd, Wi);
				#endif
				#if SPECULAR_BRDF != SPECULAR_BRDF_NONE
					fr += SampleSpecularBrdf(ppd, Wi);
				#endif
			#endif
			Wi = TangentToWorldSpace(Wi, ppd);
			accu += Li(Wi) * fr;
		}
		
		#if IMPORTANCE_SAMPLE
			accu *= 1 / (float)numSamples;
		#else
			// uniform distribution has a PDF of 1 / (2 * PI)
			accu *= (2 * PI) / (float)numSamples;
		#endif
		
		//accu =  FresnelSchlick( SpecularColor.rgb, VdotH );
		
		output.color = float4(accu, 1.0f);
		output.numSamples = (float)1;
		
		return output;		
	#elif RENDER_PASS == RENDER_PASS_PICKING
		return RGBA8ToFloat4(GetInstanceData(Input).GameObjectID);
	#else
		return float4(1.0f, Roughness, 1.0f, 1.0f);
	#endif
}

#endif

